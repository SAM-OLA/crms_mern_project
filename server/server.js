// Using Express Framework


const express = require("express");
const fs = require("fs");
const cors = require("cors");
const PORT = process.env.PORT || 4000;
const path = require("path");
const nodemailer = require('nodemailer')
const writeXlsxFile = require('write-excel-file/node')
const readXlsxFile = require('read-excel-file/node')
const app = express();
const multer = require("multer")
var data = fs.readFileSync("db.json")
var removeUser = "BVN";
var removeUser1 = "TIN";
 //const jsonServer = require("json-server")
 //const server = jsonServer.create()
 //const router = jsonServer.router('db.json')
 //const middlewares = jsonServer.defaults()
 
 //server.use(middlewares)
 //server.use((req, res, next) => { // Middleware to disable CORS
  //res.header("Access-Control-Allow-Origin", "*");
  //next();
//})
//server.use(router)
 //server.listen(5000, () => {
   //console.log('JSON Server is running')
 //})

 app.use(cors());
// app.use(cookieParser);
 app.use(express.static("build"));
  
 //app.use(express.static(path.join(__dirname,"/public")))
 //let url1 = null;
 //let url2 = null;
      
 //create a Async function to fetch and write to XML
 
 console.log("Hello Server")
 
app.get("/CRMS300xmlGenerated", (req, res) => {
/*
    const protocol = req.protocol;
    const host = req.hostname;
    const url = req.originalUrl;
    const port1 = process.env.PORT || PORT;
  
    const fullUrl = `${protocol}://${host}:${port1}${url}`

*/
//url1 = new URL(`${req.protocol}://${req.get('host')}/crms300data/1`);
//url2 = new URL(`${req.protocol}://${req.get('host')}/crmsconfigdata/1`);
//console.log('1 '+url1)
  console.log('request was made to '+req.url);
  const urlusername = req.query.username;
  const urluseremail = req.query.useremail;
  const urluserstatus = req.query.userstatus;
  write300data()
  createExcelFile(urlusername,urluseremail, urluserstatus)  
  sendcrms300xmlmail(urlusername,urluseremail, urluserstatus)
  res.sendFile(path.join(__dirname,"build", "index.html"));
  //res.send(`<div><h2>Files Generated and Sent to  riskmgt@suntrustng.com 

    //          Check your Mail!!!</h2>"+"<p><a href='javascript:close_window();>close</a>
     //         </p></div>`)
 });

 app.get("/CRMS400CxmlGenerated", (req, res) => {
  /*
      const protocol = req.protocol;
      const host = req.hostname;
      const url = req.originalUrl;
      const port1 = process.env.PORT || PORT;
    
      const fullUrl = `${protocol}://${host}:${port1}${url}`
  
  */
  //url1 = new URL(`${req.protocol}://${req.get('host')}/crms300data/1`);
  //url2 = new URL(`${req.protocol}://${req.get('host')}/crmsconfigdata/1`);
  //console.log('1 '+url1)
    console.log('request was made to '+req.url);
    const urlusername = req.query.username;
    const urluseremail = req.query.useremail;
    const urluserstatus = req.query.userstatus;
    write400Cdata()
    //createExcelFile(urlusername,urluseremail, urluserstatus)  
    //sendcrms300xmlmail(urlusername,urluseremail, urluserstatus)
    res.sendFile(path.join(__dirname,"build", "index.html"));
    //res.send(`<div><h2>Files Generated and Sent to  riskmgt@suntrustng.com 
  
      //          Check your Mail!!!</h2>"+"<p><a href='javascript:close_window();>close</a>
       //         </p></div>`)
   });
  app.get("/courses", (req, res) => {
    //console.log("Our CRMS 400 has This ",data.crms400Cdata)
    console.log('request was made '+req.url);
    //fs.writeFile('mynewfile3.txt', 'Hello content!', function (err) {
      //if (err) throw err;
      //console.log('Saved!');
    //});
    
     res.send("Data Deleted!!!")
  });

  app.get("/CRMS300xmlGeneratedSelf", (req, res) => {
    console.log('request was made to '+req.url);
    const urlusername = req.query.username;
    const urluseremail = req.query.useremail;
    const urluserstatus = req.query.userstatus;
    createExcelFile(urlusername,urluseremail, urluserstatus)
    sendcrms300xmlmail(urlusername,urluseremail, urluserstatus)
    res.sendFile(path.join(__dirname,"build", "index.html"));
    //res.send("This File was generated by "+urlparam)
  })

  app.get("/ReadCRMS400C", (req, res) => {
    console.log('request was made to '+req.url);
    
    readXlsxFile('/files/crms400Cdata.xlsx').then((rows) => {
      // `rows` is an array of rows
      // each row being an array of cells.
      console.log("Read Started Good up to here!!!") 
    })
    
    res.sendFile(path.join(__dirname,"build", "index.html"));
    //res.send("This File was generated by "+urlparam)
  })
  
  app.get("/", (req, res) => {
    console.log('request was made to '+req.url);
    //res.cookie('sky','blue');
    //res.cookie('grass','green');
    //console.log('Cookies received -- '+req.cookies);
    res.sendFile(path.join(__dirname,"build", "index.html"));
    //res.send("Hello Home Page")
    //res.sendFile(path.join(__dirname,"public", "index.html"));
    //app.use(express.static(path.join(__dirname,"/public")))
  });
  const storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, 'files/')
    },
    filename: function (req, file, cb) {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
      cb(null, file.originalname)
    }
  })

  const upload = multer({ storage: storage })
  //const upload = multer({dest:"files/"})
  app.post("/uploadfile", upload.any(),(req, res) => {
    console.log('request was made to '+req.url);
    console.log(req.body);
    console.log(req.files);

    
    //deletecrms400cdatabvn()
    //deletecrms400cdatatin()
    updatecrms400cdataarrToobj()
    loadnewdata()
    console.log('***** End *****');
    res.sendFile(path.join(__dirname,"build", "index.html"));
  

          
    res.redirect('/CreditReturn')
    //res.send("Data Upload Successful")
    //res.sendFile(path.join(__dirname,"build", "index.html"));
    //res.send("Data Upload Successful")
    //res.sendFile(path.join(__dirname,"public", "index.html"));
    //app.use(express.static(path.join(__dirname,"/public")))
  });

  app.post("/loadexcelfile", (req, res) => {
    console.log('request was made to '+req.url);
    console.log(req.body);
    console.log(req.files);

    
    //deletecrms400cdatabvn()
    //deletecrms400cdatatin()
    loadnewdata()
  

          

  
    res.send("Excel Data Loaded Successfully !!! ")
    //res.sendFile(path.join(__dirname,"public", "index.html"));
    //app.use(express.static(path.join(__dirname,"/public")))
  });

  app.get("/CreditReturn", (req, res) => {
    console.log('Credit Return request was made '+req.url);
    console.log('CreditReturn request was made '+req.body);
    console.log('CreditReturn request was made '+req.uname);
    //res.cookie('sky','blue');
    //res.cookie('grass','green');
    res.sendFile(path.join(__dirname,"build", "index.html"));
  });
  app.get("*", (req, res) => {
    console.log('All request was made '+req.url);
    //res.sendFile(path.join(__dirname,"build", "index.html"));
    //res.send("Hello All Pages")
    res.sendFile(path.join(__dirname,"build", "index.html"));
});

app.listen(PORT, () => {
  console.log(`Server listening on ${PORT}`);
});

async function write300data(){
  console.log("Fn Starts")
  try{
    //console.log(url1)
    //console.log(url2)
    //console.log(`${url1.protocol}//${url1.hostname}:${DBPORT}${url1.pathname}`)
    const resp1 =  await fetch("http://localhost:5000/crms300data?approved=true")
    const resp2 =  await fetch("http://localhost:5000/crmsconfigdata/1")
    const jsonresponse1 =  await resp1.json();
    const jsonresponse2 =  await resp2.json();
    console.log("Data", jsonresponse1)
    console.log("First Data "+jsonresponse1[0].expiryDate)
    //const data = JSON.stringify(Data);
    var crms300WriteStream = fs.createWriteStream('CRMS300.xml');
    crms300WriteStream.write(`<?xml version="1.0" encoding="UTF-8"?>\r\n`);
    crms300WriteStream.write(`<CALLREPORT xsi:noNamespaceSchemaLocation="CRMS_SCHEMA_300_001.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r\n`);            
    crms300WriteStream.write(`    <HEADER>\r\n`);
    crms300WriteStream.write(`         <CALLREPORT_ID>CRMS300</CALLREPORT_ID>\r\n`);
    crms300WriteStream.write(`         <CALLREPORT_DESC>Rendition of Borrower Credit Details (Individual and Non-Individual)</CALLREPORT_DESC>\r\n`);
    crms300WriteStream.write(`         <INST_CODE>${jsonresponse2.bankcode}</INST_CODE>\r\n`);
    crms300WriteStream.write(`         <INST_NAME>${jsonresponse2.bankname}</INST_NAME>\r\n`);
    crms300WriteStream.write(`         <AS_AT>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</AS_AT>\r\n`);
    crms300WriteStream.write(`    </HEADER>\r\n`);
    crms300WriteStream.write(`    <BODY>\r\n`);
  for(var i in jsonresponse1){
    crms300WriteStream.write(`        <CALLREPORT_DATA>\r\n`);
    crms300WriteStream.write(`               <SL_NO>${jsonresponse1[i].sno}</SL_NO>\r\n`);
    crms300WriteStream.write(`               <UNIQUE_IDENTIFICATION_TYPE>${jsonresponse1[i].uniqidentify1}</UNIQUE_IDENTIFICATION_TYPE>\r\n`);
    crms300WriteStream.write(`               <UNIQUE_IDENTIFICATION_NO>${jsonresponse1[i].uniidentifno}</UNIQUE_IDENTIFICATION_NO>\r\n`);
    crms300WriteStream.write(`               <CREDIT_TYPE>${jsonresponse1[i].credittype}</CREDIT_TYPE>\r\n`);
    crms300WriteStream.write(`               <CREDIT_PURPOSE_BY_BUSINESSLINES>${jsonresponse1[i].creditpurpose1}</CREDIT_PURPOSE_BY_BUSINESSLINES>\r\n`);
    crms300WriteStream.write(`               <CREDIT_PURPOSE_BY_BUSINESSLINES_SUB_SECTOR>${jsonresponse1[i].creditpurposesub1}</CREDIT_PURPOSE_BY_BUSINESSLINES_SUB_SECTOR>\r\n`);
    crms300WriteStream.write(`               <CREDIT_LIMIT>${(jsonresponse1[i].creditlimit).replaceAll(",","")}</CREDIT_LIMIT>\r\n`);
    crms300WriteStream.write(`               <OUTSTANDING_AMOUNT>${(jsonresponse1[i].outstandingamount).replaceAll(",","")}</OUTSTANDING_AMOUNT>\r\n`);
    crms300WriteStream.write(`               <FEES>\r\n`);
    crms300WriteStream.write(`                   <FEE>\r\n`);
    crms300WriteStream.write(`                       <FEE_TYPE>${(jsonresponse1[i].feeslist[0].feescode).substring(0,5)}</FEE_TYPE>\r\n`);
    crms300WriteStream.write(`                       <FEE_AMOUNT>${(jsonresponse1[i].feeslist[0].feesamount).replaceAll(",","")}</FEE_AMOUNT>\r\n`);
    crms300WriteStream.write(`                   </FEE>\r\n`);
    crms300WriteStream.write(`               </FEES>\r\n`);
    crms300WriteStream.write(`               <EFFECTIVE_DATE>${(jsonresponse1[i].startDate).substring(8,10)+"-"+(jsonresponse1[i].startDate).substring(5,7)+"-"+(jsonresponse1[i].startDate).substring(0,4)}</EFFECTIVE_DATE>\r\n`);
    crms300WriteStream.write(`               <TENOR>${jsonresponse1[i].tenor}</TENOR>\r\n`);
    crms300WriteStream.write(`               <EXPIRY_DATE>${(jsonresponse1[i].expiryDate).substring(8,10)+"-"+(jsonresponse1[i].expiryDate).substring(5,7)+"-"+(jsonresponse1[i].expiryDate).substring(0,4)}</EXPIRY_DATE>\r\n`);
    crms300WriteStream.write(`               <REPAYMENT_AGREEMENT_MODE>${jsonresponse1[i].repayagreemode}</REPAYMENT_AGREEMENT_MODE>\r\n`);
    crms300WriteStream.write(`               <INTEREST_RATE>${jsonresponse1[i].interestrate}</INTEREST_RATE>\r\n`);
    crms300WriteStream.write(`               <BENEFICIARY_ACCOUNT_NUMBER>${jsonresponse1[i].benefaccountno}</BENEFICIARY_ACCOUNT_NUMBER>\r\n`);
    crms300WriteStream.write(`               <LOCATION_OF_BENEFICIARY>${jsonresponse1[i].location}</LOCATION_OF_BENEFICIARY>\r\n`);
    crms300WriteStream.write(`               <RELATIONSHIP_TYPES>\r\n`);
    crms300WriteStream.write(`                     <RELATIONSHIP_TYPE>${jsonresponse1[i].relationshiptype}</RELATIONSHIP_TYPE>\r\n`);
    crms300WriteStream.write(`               </RELATIONSHIP_TYPES>\r\n`);
    crms300WriteStream.write(`               <COMPANY_SIZE>${jsonresponse1[i].companysize}</COMPANY_SIZE>\r\n`);
    crms300WriteStream.write(`               <FUNDING_SOURCE_CATEGORY>${jsonresponse1[i].fundsource}</FUNDING_SOURCE_CATEGORY>\r\n`);
    crms300WriteStream.write(`               <FUNDING_SOURCES>\r\n`);
    crms300WriteStream.write(`                   <FUNDING_SOURCE>\r\n`);
    crms300WriteStream.write(`                       <FUNDING_SOURCE_TYPE>${jsonresponse1[i].fundsourcecategory}</FUNDING_SOURCE_TYPE>\r\n`);
    crms300WriteStream.write(`                       <FUNDING_PERCENTAGE>${jsonresponse1[i].fundpercent}</FUNDING_PERCENTAGE>\r\n`);
    crms300WriteStream.write(`                   </FUNDING_SOURCE>\r\n`);
    crms300WriteStream.write(`               </FUNDING_SOURCES>\r\n`);
    crms300WriteStream.write(`               <ECCI_NUMBER>${jsonresponse1[i].eccinumber}</ECCI_NUMBER>\r\n`);
    crms300WriteStream.write(`               <LEGAL_STATUS>${jsonresponse1[i].legalstatus}</LEGAL_STATUS>\r\n`);
    crms300WriteStream.write(`               <CLASSIFICATION_BY_BUSINESS_LINES>${jsonresponse1[i].creditpurposebussline1}</CLASSIFICATION_BY_BUSINESS_LINES>\r\n`);
    crms300WriteStream.write(`               <CLASSIFICATION_BY_BUSINESS_LINES_SUB_SECTOR>${jsonresponse1[i].creditpurposebusssub1}</CLASSIFICATION_BY_BUSINESS_LINES_SUB_SECTOR>\r\n`);
    crms300WriteStream.write(`               <SPECIALISED_LOAN>${jsonresponse1[i].specializeloan}</SPECIALISED_LOAN>\r\n`);
    crms300WriteStream.write(`               <SPECIALISED_LOAN_MORATORIUM_PERIOD>${jsonresponse1[i].specloanmoratorium}</SPECIALISED_LOAN_MORATORIUM_PERIOD>\r\n`);
    crms300WriteStream.write(`               <DIRECTOR_UNIQUE_IDENTIFIERS>\r\n`);
    crms300WriteStream.write(`                   <DIRECTOR_UNIQUE_IDENTIFIER>\r\n`);
    crms300WriteStream.write(`                       <UNIQUE_IDENTIFICATION_TYPE>${jsonresponse1[i].directorslist[0].directorid}</UNIQUE_IDENTIFICATION_TYPE>\r\n`);
    crms300WriteStream.write(`                       <UNIQUE_IDENTIFICATION_NO>${jsonresponse1[i].directorslist[0].directorcode}</UNIQUE_IDENTIFICATION_NO>\r\n`);
    crms300WriteStream.write(`                       <DIRECTOR_EMAIL_ADDRESS>${jsonresponse1[i].directorslist[0].directoremail}</DIRECTOR_EMAIL_ADDRESS>\r\n`);      
    crms300WriteStream.write(`                   </DIRECTOR_UNIQUE_IDENTIFIER>\r\n`);
    crms300WriteStream.write(`               </DIRECTOR_UNIQUE_IDENTIFIERS>\r\n`);
    crms300WriteStream.write(`               <SYNDICATION>${jsonresponse1[i].syndication}</SYNDICATION>\r\n`);
    crms300WriteStream.write(`               <SYNDICATION_STATUS>${jsonresponse1[i].syndicationstatus}</SYNDICATION_STATUS>\r\n`);
    crms300WriteStream.write(`               <SYNDICATION_REF_NUMBER>${jsonresponse1[i].synrefnumber}</SYNDICATION_REF_NUMBER>\r\n`);
    crms300WriteStream.write(`               <COLLATERAL_DETAILS>\r\n`);
    crms300WriteStream.write(`                   <COLLATERAL_PRESENT>${jsonresponse1[i].collateralpresent}</COLLATERAL_PRESENT>\r\n`);
    crms300WriteStream.write(`                   <COLLATERAL_INFORMATION>\r\n`);
    crms300WriteStream.write(`                       <COLLATERAL_SECURE>${jsonresponse1[i].collateralsecure}</COLLATERAL_SECURE>\r\n`);
    crms300WriteStream.write(`                       <SECURITY_TYPE>${jsonresponse1[i].securitytype}</SECURITY_TYPE>\r\n`);
    crms300WriteStream.write(`                       <ADDRESS_OF_SECURITY>${jsonresponse1[i].addresssecurity}</ADDRESS_OF_SECURITY>\r\n`);
    crms300WriteStream.write(`                       <OWNER_OF_SECURITY>${jsonresponse1[i].ownersecurity}</OWNER_OF_SECURITY>\r\n`);
    crms300WriteStream.write(`                       <UNIQUE_IDENTIFICATION_TYPE_OF_SECURITY_OWNER>${jsonresponse1[i].idtypesecureowner}</UNIQUE_IDENTIFICATION_TYPE_OF_SECURITY_OWNER>\r\n`);
    crms300WriteStream.write(`                       <UNIQUE_IDENTIFIER_OF_SECURITY_OWNER>${jsonresponse1[i].idsecureowner}</UNIQUE_IDENTIFIER_OF_SECURITY_OWNER>\r\n`);
    crms300WriteStream.write(`                   </COLLATERAL_INFORMATION>\r\n`);
    crms300WriteStream.write(`               </COLLATERAL_DETAILS>\r\n`)
    crms300WriteStream.write(`               <GUARANTOR_DETAILS>\r\n`);
    crms300WriteStream.write(`                 <GUARANTEE>${jsonresponse1[i].guarantee}</GUARANTEE>\r\n`);      
    crms300WriteStream.write(`                   <GUARANTOR_INFORMATION>\r\n`);
    crms300WriteStream.write(`                       <GUARANTEE_TYPE>${jsonresponse1[i].guaranteetype}</GUARANTEE_TYPE>\r\n`);      
    crms300WriteStream.write(`                       <GUARANTOR_UNIQUE_IDENTIFICATION_TYPE>${jsonresponse1[i].guaranteeidtype}</GUARANTOR_UNIQUE_IDENTIFICATION_TYPE>\r\n`);
    crms300WriteStream.write(`                       <GUARANTOR_UNIQUE_IDENTIFICATION>${jsonresponse1[i].guarantorid}</GUARANTOR_UNIQUE_IDENTIFICATION>\r\n`);
    crms300WriteStream.write(`                       <GUARANTOR_ACCOUNT_NUMBER>${jsonresponse1[i].guarantoracctno}</GUARANTOR_ACCOUNT_NUMBER>\r\n`);
    crms300WriteStream.write(`                       <GUARANTOR_BANK_CODE>${jsonresponse1[i].guarantorbankcode}</GUARANTOR_BANK_CODE>\r\n`);
    crms300WriteStream.write(`                       <AMOUNT_GUARANTEED>${jsonresponse1[i].amountguaranteed}</AMOUNT_GUARANTEED>\r\n`);                              
    crms300WriteStream.write(`                   </GUARANTOR_INFORMATION>\r\n`)
    crms300WriteStream.write(`               </GUARANTOR_DETAILS>\r\n`)
    crms300WriteStream.write(`         </CALLREPORT_DATA>\r\n`);
  }
    crms300WriteStream.write(`    </BODY>\r\n`);
    crms300WriteStream.write(`    <FOOTER>\r\n`);      
    crms300WriteStream.write(`         <AUTH_SIGNATORY>\r\n`);
    crms300WriteStream.write(`               <NAME>${jsonresponse2.authsign1}</NAME>\r\n`);
    crms300WriteStream.write(`               <DESIGNATION>${jsonresponse2.designation1}</DESIGNATION>\r\n`);
    crms300WriteStream.write(`               <POSITION>${jsonresponse2.position}</POSITION>\r\n`);
    crms300WriteStream.write(`               <DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</DATE>\r\n`);
    crms300WriteStream.write(`               <TEL_NO>${jsonresponse2.telephonenumber1}</TEL_NO>\r\n`);
    crms300WriteStream.write(`               <EXTN>${jsonresponse2.extention1}</EXTN>\r\n`);                                    
    crms300WriteStream.write(`         </AUTH_SIGNATORY>\r\n`);
    crms300WriteStream.write(`         <CONTACT_DETAILS>\r\n`);
    crms300WriteStream.write(`               <NAME>${jsonresponse2.contactname}</NAME>\r\n`);
    crms300WriteStream.write(`               <DESIGNATION>${jsonresponse2.designation2}</DESIGNATION>\r\n`);
    crms300WriteStream.write(`               <DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</DATE>\r\n`);
    crms300WriteStream.write(`               <TEL_NO>${jsonresponse2.telephonenumber2}</TEL_NO>\r\n`);
    crms300WriteStream.write(`               <EXTN>${jsonresponse2.extention2}</EXTN>\r\n`);                                    
    crms300WriteStream.write(`         </CONTACT_DETAILS>\r\n`);                  
    crms300WriteStream.write(`         <DESC/>\r\n`);
    crms300WriteStream.write(`         <PREPARED_BY>${jsonresponse2.preparedby}</PREPARED_BY>\r\n`);
    crms300WriteStream.write(`         <AUTH_BY/>\r\n`);
    crms300WriteStream.write(`         <MLR_OFFICER_CODE/>\r\n`);
    crms300WriteStream.write(`         <HEAD_OFFICE_ADDRESS>${jsonresponse2.bankname}</HEAD_OFFICE_ADDRESS>\r\n`);
    crms300WriteStream.write(`         <TEL_NO>${jsonresponse2.bankscontactphone}</TEL_NO>\r\n`);
    crms300WriteStream.write(`         <DATE/>\r\n`);
    crms300WriteStream.write(`         <BRANCH_MANAGER/>\r\n`);
    crms300WriteStream.write(`         <PREPARED_DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</PREPARED_DATE>\r\n`);
    crms300WriteStream.write(`         <CHECKED_BY>${jsonresponse2.authsign1}</CHECKED_BY>\r\n`);
    crms300WriteStream.write(`         <CHECKED_DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</CHECKED_DATE>\r\n`);
    crms300WriteStream.write(`    </FOOTER>\r\n`);            
    crms300WriteStream.write(`</CALLREPORT>`);            
    //await fs.createWriteStream('CRMS300.xml');
    //await fs.writeFile('mynewfile3A.txt', jsonresponse, function (err) {
      //if (err) throw err;
      //console.log('Saved!');
    //});  
  }
  catch(err){
    console.log("Error", err)
  }
    
    console.log("Functions Ends")
}

async function write400Cdata(){
    console.log("Fn Starts")
    try{
      
      const resp1 =  await fetch("http://localhost:5000/crms400Cdata")
      const resp2 =  await fetch("http://localhost:5000/crmsconfigdata/1")
      const jsonresponse1 =  await resp1.json();
      const jsonresponse2 =  await resp2.json();
      console.log("Data", jsonresponse1)
      
      var crms400CWriteStream = fs.createWriteStream('CRMS400C.xml');
      crms400CWriteStream.write(`<?xml version="1.0" encoding="UTF-8"?>\r\n`);
      crms400CWriteStream.write(`<CALLREPORT xsi:noNamespaceSchemaLocation="CRMS_SCHEMA_400C_001.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r\n`);            
      crms400CWriteStream.write(`    <HEADER>\r\n`);
      crms400CWriteStream.write(`         <CALLREPORT_ID>CRMS400C</CALLREPORT_ID>\r\n`);
      crms400CWriteStream.write(`         <CALLREPORT_DESC>Update of Outstanding Balance and Liquidation of Existing Facility</CALLREPORT_DESC>\r\n`);
      crms400CWriteStream.write(`         <INST_CODE>${jsonresponse2.bankcode}</INST_CODE>\r\n`);
      crms400CWriteStream.write(`         <INST_NAME>${jsonresponse2.bankname}</INST_NAME>\r\n`);
      crms400CWriteStream.write(`         <AS_AT>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</AS_AT>\r\n`);
      crms400CWriteStream.write(`    </HEADER>\r\n`);
      crms400CWriteStream.write(`    <BODY>\r\n`);
    for(var i in jsonresponse1){
      crms400CWriteStream.write(`        <CALLREPORT_DATA>\r\n`);
      crms400CWriteStream.write(`               <SL_NO>${jsonresponse1[i].sno}</SL_NO>\r\n`);
      crms400CWriteStream.write(`               <UNIQUE_IDENTIFICATION_TYPE>${jsonresponse1[i].uniqidentify1}</UNIQUE_IDENTIFICATION_TYPE>\r\n`);
      crms400CWriteStream.write(`               <UNIQUE_IDENTIFICATION_NO>${jsonresponse1[i].uniidentifno}</UNIQUE_IDENTIFICATION_NO>\r\n`);
      crms400CWriteStream.write(`               <CRMS_REFERENCE_NUMBER>${jsonresponse1[i].crmsrefnumber}</CRMS_REFERENCE_NUMBER>\r\n`);
      crms400CWriteStream.write(`               <OUTSTANDING_AMOUNT>${((jsonresponse1[i].outstandingamount)).toFixed(2)}</OUTSTANDING_AMOUNT>\r\n`);
      crms400CWriteStream.write(`               <PERFORMANCE_REPAYMENT_STATUS>${jsonresponse1[i].repayagreemode}</PERFORMANCE_REPAYMENT_STATUS>\r\n`);
      crms400CWriteStream.write(`               <TOTAL_BANK_INDUCED_DEBIT_BANK_CHARGES>${((jsonresponse1[i].tbibankcharges)).toFixed(2)}</TOTAL_BANK_INDUCED_DEBIT_BANK_CHARGES>\r\n`);
      crms400CWriteStream.write(`               <TOTAL_BANK_INDUCED_CREDIT_WRITEOFF>${((jsonresponse1[i].tbicreditwriteoff)).toFixed(2)}</TOTAL_BANK_INDUCED_CREDIT_WRITEOFF>\r\n`);
      crms400CWriteStream.write(`               <TOTAL_BANK_INDUCED_CREDIT_DRAWDOWN>${((jsonresponse1[i].tbicreditdrawdown)).toFixed(2)}</TOTAL_BANK_INDUCED_CREDIT_DRAWDOWN>\r\n`);
      crms400CWriteStream.write(`               <TOTAL_CUSTOMER_INDUCED_CREDIT>${((jsonresponse1[i].tcicredit)).toFixed(2)}</TOTAL_CUSTOMER_INDUCED_CREDIT>\r\n`);
      crms400CWriteStream.write(`               <TOTAL_CUSTOMER_INDUCED_CREDIT_TRN_TYPE>${jsonresponse1[i].tcicredittrntype}</TOTAL_CUSTOMER_INDUCED_CREDIT_TRN_TYPE>\r\n`);
      crms400CWriteStream.write(`               <TOTAL_CUSTOMER_INDUCED_DEBIT>${((jsonresponse1[i].tcidebittrxn)).toFixed(2)}</TOTAL_CUSTOMER_INDUCED_DEBIT>\r\n`);
      crms400CWriteStream.write(`               <TOTAL_CUSTOMER_INDUCED_DEBIT_TRN_TYPE>${jsonresponse1[i].tcidebittrntype}</TOTAL_CUSTOMER_INDUCED_DEBIT_TRN_TYPE>\r\n`);
      crms400CWriteStream.write(`               <UNAMORTIZED_CREDIT_CHARGES>${((jsonresponse1[i].unamortisedcredchgs)).toFixed(2)}</UNAMORTIZED_CREDIT_CHARGES>\r\n`);
      crms400CWriteStream.write(`               <LIQUIDATION>${jsonresponse1[i].liquidation}</LIQUIDATION>\r\n`);
      crms400CWriteStream.write(`        </CALLREPORT_DATA>\r\n`);
    }
      crms400CWriteStream.write(`    </BODY>\r\n`);
      crms400CWriteStream.write(`    <FOOTER>\r\n`);      
      crms400CWriteStream.write(`         <AUTH_SIGNATORY>\r\n`);
      crms400CWriteStream.write(`               <NAME>${jsonresponse2.authsign1}</NAME>\r\n`);
      crms400CWriteStream.write(`               <DESIGNATION>${jsonresponse2.designation1}</DESIGNATION>\r\n`);
      crms400CWriteStream.write(`               <POSITION>${jsonresponse2.position}</POSITION>\r\n`);
      crms400CWriteStream.write(`               <DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</DATE>\r\n`);
      crms400CWriteStream.write(`               <TEL_NO>${jsonresponse2.telephonenumber1}</TEL_NO>\r\n`);
      crms400CWriteStream.write(`               <EXTN>${jsonresponse2.extention1}</EXTN>\r\n`);                                    
      crms400CWriteStream.write(`         </AUTH_SIGNATORY>\r\n`);
      crms400CWriteStream.write(`         <CONTACT_DETAILS>\r\n`);
      crms400CWriteStream.write(`               <NAME>${jsonresponse2.contactname}</NAME>\r\n`);
      crms400CWriteStream.write(`               <DESIGNATION>${jsonresponse2.designation2}</DESIGNATION>\r\n`);
      crms400CWriteStream.write(`               <DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</DATE>\r\n`);
      crms400CWriteStream.write(`               <TEL_NO>${jsonresponse2.telephonenumber2}</TEL_NO>\r\n`);
      crms400CWriteStream.write(`               <EXTN>${jsonresponse2.extention2}</EXTN>\r\n`);                                    
      crms400CWriteStream.write(`         </CONTACT_DETAILS>\r\n`);                  
      crms400CWriteStream.write(`         <DESC/>\r\n`);
      crms400CWriteStream.write(`         <PREPARED_BY>${jsonresponse2.preparedby}</PREPARED_BY>\r\n`);
      crms400CWriteStream.write(`         <AUTH_BY/>\r\n`);
      crms400CWriteStream.write(`         <MLR_OFFICER_CODE/>\r\n`);
      crms400CWriteStream.write(`         <HEAD_OFFICE_ADDRESS>${jsonresponse2.bankname}</HEAD_OFFICE_ADDRESS>\r\n`);
      crms400CWriteStream.write(`         <TEL_NO>${jsonresponse2.bankscontactphone}</TEL_NO>\r\n`);
      crms400CWriteStream.write(`         <DATE/>\r\n`);
      crms400CWriteStream.write(`         <BRANCH_MANAGER/>\r\n`);
      crms400CWriteStream.write(`         <PREPARED_DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</PREPARED_DATE>\r\n`);
      crms400CWriteStream.write(`         <CHECKED_BY>${jsonresponse2.authsign1}</CHECKED_BY>\r\n`);
      crms400CWriteStream.write(`         <CHECKED_DATE>${jsonresponse2.reportdate.substring(8,10)+"-"+jsonresponse2.reportdate.substring(5,7)+"-"+jsonresponse2.reportdate.substring(0,4)}</CHECKED_DATE>\r\n`);
      crms400CWriteStream.write(`    </FOOTER>\r\n`);            
      crms400CWriteStream.write(`</CALLREPORT>`);            
      //await fs.createWriteStream('CRMS300.xml');
      //await fs.writeFile('mynewfile3A.txt', jsonresponse, function (err) {
        //if (err) throw err;
        //console.log('Saved!');
      //});  
    }
    catch(err){
      console.log("Error", err)
    }
      
      console.log("Functions Ends")
  }

async function deletecrms400cdatabvn()
{
  var json = JSON.parse(data);
  var crms400Cdata = json.crms400Cdata;
  json.crms400Cdata = crms400Cdata.filter((crms400C) => { return crms400C.sno === removeUser });
  fs.writeFileSync('db.json', JSON.stringify(json, null, 2));
}
async function deletecrms400cdatatin(){
  var json = JSON.parse(data);
  var crms400Cdata = json.crms400Cdata;
  json.crms400Cdata = crms400Cdata.filter((crms400C) => { return crms400C.uniqidentify1 !== removeUser1 });
  fs.writeFileSync('db.json', JSON.stringify(json, null, 2));
}
function loadnewdata(){
  console.log('Start Load File')
  const schema = {
    "S/N":{
      prop:"sno",
      type:Number,
      required:true
    },
    "UNIQUE_IDENTIFIER":{
      prop:"uniqidentify1",
      type:String,
      required:true
    },
    "UNIQUE_IDENTIFICATION_NO":{
      prop:"uniidentifno",
      type:String,
      required:true
    },
    "CRMS_REFERENCE_NUMBER":{
      prop:"crmsrefnumber",
      type:String,
      required:true
    },
    "OUTSTANDING_AMOUNT":{
      prop:"outstandingamount",
      type:Number,
      required:true
    },
    "PERFORMANCE REPAYMENT STATUS":{
      prop:"repayagreemode",
      type:Number,
      required:true
    },
    "TOTAL_BANK_INDUCED_DEBIT_BANK_CHARGES":{
      prop:"tbibankcharges",
      type:Number,
      required:true
    },
    "TOTAL_BANK_INDUCED_CREDIT_WRITEOFF":{
      prop:"tbicreditwriteoff",
      type:Number,
      required:true
    },
    "TOTAL_BANK_INDUCED_CREDIT_DRAWDOWN":{
      prop:"tbicreditdrawdown",
      type:Number,
      required:true
    },
    "TOTAL _CUSTOMER _INDUCED_CREDIT":{
      prop:"tcicredit",
      type:Number,
      required:true
    },
    "TOTAL _CUSTOMER_ INDUCED_CREDIT_TRN_TYPE":{
      prop:"tcicredittrntype",
      type:String,
      required:true
    },
    "TOTAL _CUSTOMER_ INDUCED_DEBIT_AMT":{
      prop:"tcidebittrxn",
      type:Number,
      required:true
    },
    "TOTAL _CUSTOMER_INDUCED_DEBIT_TRN_TYPE":{
      prop:"tcidebittrntype",
      type:String,
      required:true
    },
    "UNAMORTIZED_CREDIT_CHARGES":{
      prop:"unamortisedcredchgs",
      type:Number,
      required:true
    },
    "LIQUIDATION":{
      prop:"liquidation",
      type:String,
      required:true
    },
    "approved":{
      prop:"approved",
      type:Boolean,
      required:true
    },
    "id":{
      prop:"id",
      type:Number,
      required:true
    }
  }
  console.log('Start Load File 2')
  var crms400Cdata = null
  console.log('Start Load File 3')
  readXlsxFile('./files/crms400Cdata.xlsx', { schema }).then(({ rows, errors }) => {
    console.log('Start Load File 4')
      crms400Cdata = JSON.stringify(rows)
      //deletecrms400cdatabvn()
      console.log(crms400Cdata)
      
    //}
    // `rows` is an array of rows
    // each row being an array of cells.
    console.log("Read Started Good up to here!!!") 
  }).then((res)=>{
    
    console.log("Added Successfully")
    fetch("http://localhost:5000/crms400Cdata",{
        method:"POST",
        headers:{"content-type":"application/json"},
        body:crms400Cdata
      }).then((res)=>{
        console.log("Saved Successfully")
        //window.location.reload()
      }).catch((err)=>{
        console.log(err)
        //alert(err)
      })
    
    //window.location.reload()
  }).catch((errors)=>{
    console.log(errors)
  })
}
function updatecrms400cdataarrToobj(){
  var json = JSON.parse(data);
  var crms400Cdata = json.crms400Cdata;
  console.log('Lets Check the length',json.crms400Cdata.length)
  if(json.crms400Cdata.length >= 0)
  {
    console.log('Yes Delete and ready for upload')
    json.crms400Cdata = Object.assign({},json.crms400Cdata)
    json.crms400Cdata = {}
    fs.writeFileSync('db.json', JSON.stringify(json, null, 2));
    //res.redirect('/loadexcelfile');
  }
  //else{
    //res.redirect('/loadexcelfile')
  //}
}

async function readcrms400CData(){
  const schema = {
    'START DATE': {
      // JSON object property name.
      prop: 'date',
      type: Date
    },
    'NUMBER OF STUDENTS': {
      prop: 'numberOfStudents',
      type: Number,
      required: true
    },
    // Nested object example.
    // 'COURSE' here is not a real Excel file column name,
    // it can be any string — it's just for code readability.
    'COURSE': {
      // Nested object path: `row.course`
      prop: 'course',
      // Nested object schema:
      type: {
        'IS FREE': {
          prop: 'isFree',
          type: Boolean
        },
        'COURSE TITLE': {
          prop: 'title',
          type: String
        }
      }
    },
    'CONTACT': {
      prop: 'contact',
      required: true,
      // A custom `type` can be defined.
      // A `type` function only gets called for non-empty cells.
      type: (value) => {
        const number = parsePhoneNumber(value)
        if (!number) {
          throw new Error('invalid')
        }
        return number
      }
    },
    'STATUS': {
      prop: 'status',
      type: String,
      oneOf: [
        'SCHEDULED',
        'STARTED',
        'FINISHED'
      ]
    }
  }
  
  readXlsxFile(file, { schema }).then(({ rows, errors }) => {
    // `errors` list items have shape: `{ row, column, error, reason?, value?, type? }`.
    errors.length === 0
  
    rows == [{
      date: new Date(2018, 2, 24),
      numberOfStudents: 10,
      course: {
        isFree: true,
        title: 'Chemistry'
      },
      contact: '+11234567890',
      status: 'SCHEDULED'
    }]
  })
}

function sendcrms300xmlmail(username,useremail,userstatus){
  console.log("User Status is "+userstatus)
      
      var tranporter = nodemailer.createTransport({
      host:"smtp.gmail.com",
      port:465,
      auth:{
        user:"dapoolaoye@gmail.com",
        pass:"nkykfennudvtknld"
      }
     });
     var xlattachement = username+"data.xlsx"

     var attachedfiles = [];
      if(userstatus==="True"){
          attachedfiles = [{
          filename:'CRMS300.xml',
           path:'./CRMS300.xml'
          },
          {
            filename:`${xlattachement}`,
            path:`./${xlattachement}`
          }]
      }
      else{
        attachedfiles = [{
          filename:'None.xml',
          path:'./None.xml'
        },
        {
        filename:`${xlattachement}`,
        path:`./${xlattachement}`
        }]
      }
      console.log("Attachement is "+attachedfiles[0].filename) 

     var mailOptions = {
      from:'dapoolaoye@gmail.com',
      to:useremail,
      subject:'my crms report email',
      html:'<h1>Hello the mail is from D & T Solutions Coy</h1>',
      attachments:attachedfiles
     };
     tranporter.sendMail(mailOptions, function(error,info){
      if(error){
        console.log(error)
      }else{
        console.log('Email Sent:'+info.response)
      }
     })
 
}
async function createExcelFile(user,approvedstatus){
  var resp1=null;
  try{
    if(approvedstatus==="True")
    {
      resp1 =  await fetch("http://localhost:5000/crms300data?approved=true")
    }
    else{
      resp1 =  await fetch(`http://localhost:5000/crms300data?username=${user}`)
    }
    const jsonresponse1 =  await resp1.json();
    console.log("Data", jsonresponse1)
    console.log("First Data "+jsonresponse1[0].expiryDate)
  
  const HEADER_ROW = [
    {
      value: 'S NO',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
      width: 100
    },
    {
      value: 'UNIQUE_IDENTIFICATION_TYPE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050'
    },
    {
      value: 'UNIQUE_IDENTIFICATION_NO',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'CREDIT_TYPE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'CREDIT_PURPOSE_BY_BUSINESSLINES',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'CREDIT_PURPOSE_BY_BUSINESSLINES_SUB_SECTOR',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'CREDIT_LIMIT',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'OUTSTANDING_AMOUNT',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'FEES (FEE_TYPE & FEE_AMOUNT)',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'EFFECTIVE_DATE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'TENOR',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'EXPIRY_DATE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'REPAYMENT_AGREEMENT_MODE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'INTEREST_RATE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'BENEFICIARY_ACCOUNT_NUMBER',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'LOCATION_OF_BENEFICIARY',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'RELATIONSHIP_TYPE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'COMPANY_SIZE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'FUNDING_SOURCE_CATEGORY',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'ECCI_NUMBER',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'FUNDING_SOURCE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'LEGAL_STATUS ',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'CLASSIFICATION_BY_BUSINESS_LINES',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'CLASSIFICATION_BY_BUSINESS_LINES_SUB_SECTOR',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'SPECIALISED_LOAN ',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'SPECIALISED_LOAN_MORATORIUM_PERIOD',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'DIRECTOR_UNIQUE_IDENTIFIER',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'SYNDICATION',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'SYNDICATION_STATUS',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'SYNDICATION_REF_NUMBER',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'COLLATERAL_PRESENT',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'COLLATERAL_SECURE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'SECURITY_TYPE ',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'ADDRESS_OF_SECURITY',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'OWNER_OF_SECURITY',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'UNIQUE_IDENTIFICATION_TYPE_OF_SECURITY_OWNER',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'UNIQUE_IDENTIFIER_OF_SECURITY_OWNER',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92D050',
    },
    {
      value: 'GUARANTEE',
      fontWeight: 'bold',
      fontFamily: 'Times New Roman',
      fontSize: 11,
      backgroundColor: '#92D050',
    },
    {
      value: 'GUARANTEE_TYPE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92d050',
    },
    {
      value: 'GUARANTOR_UNIQUE_IDENTIFICATION_TYPE',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92d050',
    },
    {
      value: 'GUARANTOR_UNIQUE_IDENTIFICATION',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92d050',
    },
    {
      value: 'AMOUNT_GUARANTEED',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92d050',
    },
    {
      value: 'GSI_MANDATE_AGREED',
      fontWeight: 'bold',
      fontSize: 11,
      fontFamily: 'Times New Roman',
      backgroundColor: '#92d050',
    }
  ]

  const schema=[
    {
      column: 'S NO',
      type:String,
      value:jresp => jresp.sno,
      width: 10
    },
    {
      column: 'UNIQUE_IDENTIFICATION_TYPE',
      type:String,
      value:jresp => jresp.uniqidentify1,
      width: 35
    },
    {
      column: 'UNIQUE_IDENTIFICATION_NO',
      type:String,
      value:jresp => jresp.uniidentifno,
      width: 35
    },
    {
      column: 'CREDIT_TYPE',
      type:String,
      value:jresp => jresp.credittype,
      width: 35
    },
    {
      column: 'CREDIT_PURPOSE_BY_BUSINESSLINES',
      type:String,
      value:jresp => jresp.creditpurposebussline1,
      width: 35
    },
    {
      column: 'CREDIT_PURPOSE_BY_BUSINESSLINES_SUB_SECTOR',
      type:String,
      value:jresp => jresp.creditpurposebusssub1,
      width: 35
    },
    {
      column: 'CREDIT_LIMIT',
      type:String,
      value:jresp => jresp.creditlimit,
      width: 25
    },
    {
      column: 'OUTSTANDING_AMOUNT',
      type:String,
      value:jresp => jresp.outstandingamount,
      width: 25
    },
    {
      column: 'FEE',
      type:String,
      value:jresp => jresp.feeslist[0].feesamount,
      width: 25
    },
    {
      column: 'EFFECTIVE_DATE',
      type:String,
      value:jresp => (jresp.startDate).substring(8,10)+"-"+(jresp.startDate).substring(5,7)+"-"+(jresp.startDate).substring(0,4),
      width: 25
    },
    {
      column: 'TENOR',
      type:String,
      value:jresp => jresp.tenor,
      width: 25
    },
    {
      column: 'EXPIRY_DATE',
      type:String,
      value:jresp => (jresp.expiryDate).substring(8,10)+"-"+(jresp.expiryDate).substring(5,7)+"-"+(jresp.expiryDate).substring(0,4),
      width: 25
    },
    {
      column: 'REPAYMENT_AGREEMENT_MODE',
      type:String,
      value:jresp => jresp.repayagreemode,
      width: 25
    },
    {
      column: 'INTEREST_RATE',
      type:String,
      value:jresp => jresp.interestrate,
      width: 25
    },
    {
      column: 'BENEFICIARY_ACCOUNT_NUMBER',
      type:String,
      value:jresp => jresp.benefaccountno,
      width: 25
    },
    {
      column: 'LOCATION_OF_BENEFICIARY',
      type:String,
      value:jresp => jresp.location,
      width: 25
    },
    {
      column: 'RELATIONSHIP_TYPE',
      type:String,
      value:jresp => jresp.relationshiptype,
      width: 25
    },
    {
      column: 'COMPANY_SIZE',
      type:String,
      value:jresp => jresp.companysize,
      width: 25
    },
    {
      column: 'FUNDING_SOURCE_CATEGORY',
      type:String,
      value:jresp => jresp.fundsourcecategory,
      width: 25
    },
    {
      column: 'FUNDING_SOURCE_TYPE',
      type:String,
      value:jresp => jresp.fundsource,
      width: 25
    },
    {
      column: 'FUNDING_PERCENTAGE',
      type:String,
      value:jresp => jresp.fundpercent,
      width: 25
    },
    {
      column: 'ECCI_NUMBER',
      type:String,
      value:jresp => jresp.eccinumber,
      width: 25
    },
    {
      column: 'LEGAL_STATUS',
      type:String,
      value:jresp => jresp.legalstatus,
      width: 25
    },
    {
      column: 'CLASSIFICATION_BY_BUSINESS_LINES',
      type:String,
      value:jresp => jresp.creditpurposebussline1,
      width: 25
    },
    {
      column: 'CLASSIFICATION_BY_BUSINESS_LINES_SUB_SECTOR',
      type:String,
      value:jresp => jresp.creditpurposebusssub1,
      width: 25
    },
    {
      column: 'SPECIALISED_LOAN',
      type:String,
      value:jresp => jresp.specializeloan,
      width: 25
    },
    {
      column: 'SPECIALISED_LOAN_MORATORIUM_PERIOD',
      type:String,
      value:jresp => jresp.specloanmoratorium,
      width: 25
    },
    {
      column: 'DIRECTOR_UNIQUE_IDENTIFIERS',
      type:String,
      value:jresp => jresp.directorslist[0].directoremail,
      width: 25
    },
    {
      column: 'SYNDICATION',
      type:String,
      value:jresp => jresp.syndication,
      width: 25
    },
    {
      column: 'SYNDICATION_STATUS',
      type:String,
      value:jresp => jresp.syndicationstatus,
      width: 25
    },
    {
      column: 'SYNDICATION_REF_NUMBER',
      type:String,
      value:jresp => jresp.synrefnumber,
      width: 25
    },
    {
      column: 'COLLATERAL_PRESENT',
      type:String,
      value:jresp => jresp.collateralpresent,
      width: 25
    },
    {
      column: 'COLLATERAL_SECURE',
      type:String,
      value:jresp => jresp.collateralsecure,
      width: 25
    },
    {
      column: 'SECURITY_TYPE',
      type:String,
      value:jresp => jresp.securitytype,
      width: 25
    },
    {
      column: 'ADDRESS_OF_SECURITY',
      type:String,
      value:jresp => jresp.addresssecurity,
      width: 25
    },
    {
      column: 'OWNER_OF_SECURITY',
      type:String,
      value:jresp => jresp.ownersecurity,
      width: 25
    },
    {
      column: 'UNIQUE_IDENTIFICATION_TYPE_OF_SECURITY_OWNER',
      type:String,
      value:jresp => jresp.idtypesecureowner,
      width: 25
    },
    {
      column: 'UNIQUE_IDENTIFIER_OF_SECURITY_OWNER',
      type:String,
      value:jresp => jresp.idsecureowner,
      width: 25
    },
    {
      column: 'GUARANTEE',
      type:String,
      value:jresp => jresp.guarantee,
      width: 25
    },
    {
      column: 'GUARANTEE_TYPE',
      type:String,
      value:jresp => jresp.guaranteetype,
      width: 25
    },
    {
      column: 'GUARANTOR_UNIQUE_IDENTIFICATION_TYPE',
      type:String,
      value:jresp => jresp.guaranteeidtype,
      width: 25
    },
    {
      column: 'GUARANTOR_UNIQUE_IDENTIFICATION',
      type:String,
      value:jresp => jresp.guarantorid,
      width: 25
    },
    {
      column: 'GUARANTOR_ACCOUNT_NUMBER',
      type:String,
      value:jresp => jresp.guarantoracctno,
      width: 25
    },
    {
      column: 'GUARANTOR_BANK_CODE',
      type:String,
      value:jresp => jresp.guarantorbankcode,
      width: 25
    },
    {
      column: 'AMOUNT_GUARANTEED',
      type:String,
      value:jresp => jresp.amountguaranteed,
      width: 25
    }]
   const objects = jsonresponse1
   

  await writeXlsxFile(objects, {
    schema,headerStyle: {
      backgroundColor: '#92d050',
      fontWeight: 'bold',
      fontFamily: 'Times New Roman'
    },
    sheet:'Loan Data',
    filePath: `./${user}data.xlsx`
  })
}
catch(err){
  console.log("Error2", err)
}
}